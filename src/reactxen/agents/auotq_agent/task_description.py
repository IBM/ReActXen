from reactxen.agents.auotq_agent.genai.Chat import GenAIChatClient
import uuid
import mlflow
import uuid
import mlflow
from dotenv import load_dotenv
import os

load_dotenv()

ASSET_LIST_complete = ["Electrical submersible pump"]

ASSET_LIST = [
    "Electrical submersible pump",
]


def drop_last_paragraph(ans):
    ans_split = ans.split("\n\n")
    if len(ans_split) > 1:
        return "\n\n".join(ans_split[:-1])
    return ans


def get_description(
    iteration=3, asset_class="Electrical submersible pump", model_id=3
):
    """_summary_

    :param iteration: _description_, defaults to 10
    :type iteration: int, optional
    :param asset_class: _description_, defaults to "Electrical submersible pump"
    :type asset_class: str, optional
    """

    SystemPrompt = """
    You are a helpful AI assistant. Given an Industrial asset, generate its description. 
    You can take a look at the following examplers. Output should contain only generate 
    Answer. 

    Question: Describe Wind Turbine Asset and its components.

    Answer: A wind turbine is a tall tower with long, spinning blades that 
    capture the wind's energy.  The wind pushes the blades around, which 
    turns a shaft that connects to a generator. The generator converts the 
    mechanical energy of the spinning shaft into electricity that we can 
    use in our homes and businesses. The main components of a wind turbine include the rotor blades, 
    the hub, the main shaft, the gearbox, the generator, the yaw system, 
    and the control system.

    Question: Describe Substation Electrical Transformer Asset and its components.

    Answer: A substation electrical transformer is a large electrical device 
    that changes the voltage of electricity. It's like a gear on a bike, 
    but instead of changing the speed of the pedals, it changes the power 
    of the electricity.  High-voltage electricity from power plants travels 
    through transmission lines to substations. The transformer steps down 
    the voltage to a safer level for distribution lines, which send the 
    electricity to homes and businesses. The main components of a substation electrical transformer include the core, windings,
    insulation, oil, and cooling system. The core is made up of thin laminations of
    steel, which are stacked together to form the magnetic circuit. The windings are
    the conductors that carry the electrical current, and are insulated from each
    other and the core to prevent short circuits. The insulation is typically made
    of paper or oil-impregnated pressboard, and is used to insulate the windings from
    each other and the core. The oil serves as both a coolant and insulator, and helps
    to prevent the transformer from overheating. The cooling system is used to remove
    the heat generated by the transformer during operation.

    """
    chat_so_far = []
    for i in range(iteration):
        experiment_name = "MyExperiment_" + asset_class + "_" + str(uuid.uuid4())
        experiment_id = mlflow.create_experiment(experiment_name)
        mdl = GenAIChatClient(
            name="ADesc",
            description="Asset Description",
            skill="Generate Asset Description",
            model=model_id,
            params={},
            system_message=SystemPrompt,
        )

        sentence = "Question: Describe " + asset_class + " Asset, and its components."
        if i > 0:
            sentence += " \n Generate better solution in terms of completeness."
            # sentence += " \n Generate better solution in terms of readability, accuracy, and completeness."

        chat_so_far.append(sentence)

        ans = mdl.create(
            context=None,
            messages=chat_so_far,
            experiment_id=experiment_id,
        )

        experiment_record = {}

        answer = ans.replace("Answer:", "").strip()
        answer = drop_last_paragraph(answer)

        iteration_count = i + 1

        experiment_record["asset_class"] = asset_class
        experiment_record["iteration_count"] = iteration_count
        experiment_record["answer_length"] = len(answer)
        experiment_record["answer"] = answer
        chat_so_far.append(answer)

    print ('------------')
    print (answer)
    print ('------------')
    return answer
